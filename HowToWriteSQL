# How to create a table with single row 
 CREATE TABLE table_name
 (Column 1 int, 
  Column 2 varchar(50), 
  Column 3 varchar(50), 
  ...) 
         
# How to Insert Value into the table with a single row
INSERT INTO table_name(Column 1, Column 2, ... )
 VALUES ('character', value, ... ) 
 
# How to Insert Values into a table with multiple rows.
INSERT INTO table_name(Column 1, Column 2, ... )
 VALUES ('character 1', value 1, ...), 
        ('character 2', value 2, ...),
        ('character 3', value 3, ...)
        
# How to Update a column to NULL / Value / Character
Update table_name SET column_name = NULL / Value / Character

# How to Update a cell to NULL / Value / Character
Update table_name SET column1_name = NULL / Value / Character
WHERE column2_name = 'character' #(or = value)#

# How to Inner Join, Left Outer Join, Right Outer Join or Full Outer Join

SELECT * 
FROM table1_name
INNER JOIN table2_name
     ON table1_name.column = table2_name.column 
-- Here only showing common contents from both tables 

SELECT *
FROM table1_name
LEFT OUTER JOIN table2_name

ORDER BY COUNT(Occupation) ASC, Occupation ASC; 
     ON table1_name.column = table2_name.column
-- Here only showing contents from table1

SELECT *
FROM table1_name
RIGHT OUTER JOIN table2_name
     ON table1_name.column = table2_name.column
-- Here only showing contents from table2

SELECT *
FROM table1_name
FULL OUTER JOIN table2_name
     ON table1_name.column = table2_name.column
-- Here showing all contents from both tables

# How to UNION two tables 

SELECT column1_name, column2_name ... 
FROM table1_name
UNION (ALL)
SELECT column1_name, column2_name ... 
FROM table2_name

# How to use CASE to return different result 

SELECT Column_1, Column_2,
CASE
    WHEN Column = value THEN 'character'
    WHEN Age > value THEN 'character' 
	ELSE 'Character' 
END AS Newcolumn_name
FROM table_name
WHERE Column_1 IS NOT NULL 
ORDER BY Column_1

# How to use HAVING to set the criteria for the output 

SELECT Column_1, COUNT(Column_1) AS Newcolumn_name
FROM table_name1
JOIN table_name2
	ON table_name1.column = table_name2.column
GROUP BY Column_1
HAVING COUNT(Column_1) > value

SELECT Column_1, AVG(Column_2) AS Newcolumn_name
FROM table_name1
JOIN table_name2
	ON table_name1.column = table_name2.column
GROUP BY Column_1
HAVING AVG(Column_2) > value
ORDER BY AVG(Column_2)

# How to use PARTITION 

SELECT Column_1, 
COUNT(Column_2) OVER (PARTITION BY Column_2) AS Newcolumn_name
FROM table_name1 T1
JOIN table_name2 T2
	ON T1.column = T2.column


GROUP BY Column_1

/* How to use Concatnate and + to write the occupations */
SELECT Name + '(' + (LEFT(Occupation,1)) + ')'
FROM OCCUPATIONS
ORDER BY Name ASC; 

SELECT CONCAT('There are a total of', ' ', count(Occupation), ' ', LOWER(Occupation),'s.')
FROM OCCUPATIONS
GROUP BY Occupation

[Output] : 
Ashely(P)
Christeen(P)
Jane(A)
Jenny(D)
Julia(A)
Ketty(P)
Maria(A)
Meera(S)
Priya(S)
Samantha(D)
There are a total of 2 doctors.
There are a total of 2 singers.
There are a total of 3 actors.
There are a total of 3 professors.

/* How to write a queries with PIVOT operator*/
SELECT <non-pivoted column>,  
    [first pivoted column] AS <column name>,  
    [second pivoted column] AS <column name>,  
    ...  
    [last pivoted column] AS <column name>  
FROM  
    (<SELECT query that produces the data>)   
    AS <alias for the source query>  
PIVOT  
(  
    <aggregation function>(<column being aggregated>)  
FOR   
[<column that contains the values that will become column headers>]   
    IN ( [first pivoted column], [second pivoted column],  
    ... [last pivoted column])  
) AS <alias for the pivot table>  
<optional ORDER BY clause>;  

-- Replace function -- 
REPLACE(string, from_string, new_string)

/* We define an employee's total earnings to be their monthly  worked, and the maximum total earnings 
to be the maximum total earnings for any employee in the Employee table. Write a query to find the maximum 
total earnings for all employees as well as the total number of employees who have maximum total earnings. 
Then print these values as  space-separated integers.*/

CREATE TABLE Employee 
(employee_id int, 
 name  varchar(20), 
 months int, 
 salary integer); 

 INSERT INTO Employee (employee_id, name, months, salary)
 VALUES ('12228', 'Rose', '15', '1968'),
        ('33645', 'Angela', '1', '3443'),
		('45692', 'Frank', '17', '1608'),
		('56118', 'Patrick', '7', '1345'),
		('59725', 'Lisa', '11', '2330'),
		('74197', 'Kimberly', '16', '4372'),
		('78454', 'Bonnie', '8', '1771'),
		('83565', 'Michael', '6', '2017'),
		('98607', 'Todd', '5', '3396'),
		('99989', 'Joe', '9', '3573')

/* First option by using Top function */
SELECT TOP 1 MAX(earnings), COUNT(employee_id)
FROM (
     SELECT employee_id, 
	    name, 
	    months, 
	    salary, 
           (months * salary) AS earnings 
     FROM Employee
      ) AS TempTable  
GROUP BY (earnings)
ORDER BY (earnings) DESC; 

/* Second option by using Declare function */
DECLARE @maxSalary int; 
SET @maxSalary = (SELECT MAX(months*salary) AS maxSalary 
FROM Employee); 

SELECT @maxSalary, COUNT(employee_id)
FROM Employee 
WHERE (months * salary) = @maxSalary; 


